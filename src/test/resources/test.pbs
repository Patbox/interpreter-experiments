// Example script file

var ergh = 6;

var test2 = (x) -> {5};
var test3 = (x) -> x * 2;

var test = (a, b, c) -> {
    print(a * b - c);
}

test(1, 2, 3);

(() -> { return 8; })()

print((2 * 5 + 8) ^ 2 * 2)

export test 98.5
export test2 0xFF

print(2 * (5 * 2 + 8) ^ 2)

var o = 0;

print(++o + 10);
print(o++ + 10);
print(o);

var map = {{
    true: false
}};

map[null] = null;
map[3] = 85;

print(typeof map, map);

var obj = {
    test: 5,
    another: "one"
};

obj[9] = "test";
obj["hello"] = "world";

print(typeof obj, obj);

var table = List();

for var i = 0; i < 128 * 3; ++i {
    table.add(Math.sin(i / Math.PI / 10));
};

var x = 0;

print(Math.random() > 0.3 || Math.random() < -0.3);

print(Global.Math);


import Test "testjar:test2";
print(Test);

print(Test.get());
Test.set("Everyone!");
print(import("testjar:test2").get());

print([ typeof Object(), typeof Map(), typeof List(), typeof 0xFF, typeof "hello", typeof Global, typeof print ]);


print(Runtime.run("return 6 * 8 + 4;"))

var rgb = (r, g, b) -> ((r * 0xFF) << 16 & 0xFF) | ((g * 0xFF) << 8 & 0xFF) | ((b * 0xFF) & 0xFF);

print(rgb(0, 0, 0))

var hvs = (hue, saturation, value) -> {
    var h = (hue * 6).floor % 6;
    var f = hue * 6 - h;
    var p = value * (1 - saturation);
    var q = value * (1 - f * saturation);
    var t = value * (1 - (1 - f) * saturation);

    /*
    if h == 0 return rgb(value, t, p);
    if h == 1 return rgb(q, value, p);
    if h == 2 return rgb(p, value, t);
    if h == 3 return rgb(p, q, value);
    if h == 4 return rgb(t, p, value);
    if h == 5 return rgb(value, p, q);
    */
    return switch h {
        case 0 -> rgb(value, t, p);
        case 1 -> rgb(q, value, p);
        case 2 -> rgb(p, value, t);
        case 3 -> rgb(p, q, value);
        case 4 -> rgb(t, p, value);
        case 5 -> rgb(value, p, q);
        default -> 0;
    };
};
var delta = 0;

import Fonts "testjar:font";

print(Fonts);

var font = Fonts.read(FS.read("./run/font.mcaf").reader);
print("Font: " + font)
var lastTime = 0;

Runtime.interval(10, () -> {
    var time = Runtime.currentTimeMillis();
    var color = hvs((delta / 10000 * 2 + 0.5) % 1, 0.7, 0.8);
    Display.clear(hvs((delta / 10000) % 1, 0.7, 1));
    for var x = 0; x < 128 * 5; ++x {
        var sin = (Math.sin((x + delta) / 40) + 1) * 128 - 0.5 + Math.cos((x + delta) / 6) * 20

        for var y = sin.floor; y <= sin.ceil; y++ {
            for var i = -2; i < 4; i++ {
                for var i2 = -2; i2 < 4; i2++ {
                    Display.setPixel(x + i2, y + i + 256 - 64, color);
                }
            }
        };
    };

    var text = "Hello World!\nMap Canvas's font format works!\nRender time: " + lastTime + "ms";

    font.drawText(text, 64 + 3, 64 + 3, 24, (x, y) -> {
        Display.setPixel(x + Math.cos(y / 40 + delta / 10) * 8, y + Math.sin(x / 40 + delta / 10) * 8, hvs((delta / 100 * 2 + 0.5 + x / 60) % 1, 0.7, 0.3));
    })

    font.drawText(text, 64, 64, 24, (x, y) -> {
        Display.setPixel(x + Math.cos(y / 40 + delta / 10) * 8, y + Math.sin(x / 40 + delta / 10) * 8, hvs((delta / 100 * 2 + 0.5 + x / 60) % 1, 0.7, 0.8));
        //Display.setPixel(x, y, 0x0);
    })

    //delta += (Math.sin(Runtime.currentTimeMillis() / 10000) + 1) * 2 + 2;
    delta += 4;
    Display.update();

    lastTime = Runtime.currentTimeMillis() - time;
    print(lastTime)
});

var path = FS.path('./run/files')
print('FS tests');
print(path);
print(FS.mkdir(path));
print(FS.exists(path));
print(FS.write(path + "/test.txt", "Hello world!\n" * 64));


print('end');
